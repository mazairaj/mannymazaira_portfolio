---
---

<div class="interactive-background">
  <video class="background-video" autoplay muted loop playsinline>
    <source src="/assets/videos/Reel_2024.mp4" type="video/mp4" />
    <!-- Fallback text if video is not supported -->
    Your browser does not support the video tag.
  </video>
  <div class="gradient-overlay"></div>
  <div class="blend-edges"></div>
  <div class="scroll-prompt">
    <button class="scroll-button" data-scroll-button>View Work</button>
  </div>
</div>

<style>
  .interactive-background {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100vw;
    height: 100%;
    overflow: hidden;
    z-index: 0;
    margin-left: 0;
    margin-right: 0;
  }

  .background-video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
  }

  .gradient-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      var(--accent-light) 0%,
      var(--accent-regular) 25%,
      var(--accent-dark) 50%,
      transparent 70%
    );
    opacity: 0.15;
    mix-blend-mode: multiply;
    pointer-events: none;
  }

  :root.theme-dark .gradient-overlay {
    mix-blend-mode: screen;
    opacity: 0.2;
  }

  .blend-edges {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at center,
      transparent 30%,
      var(--gray-999) 100%
    );
    opacity: 0.6;
    pointer-events: none;
  }

  :root.theme-dark .blend-edges {
    opacity: 0.5;
  }

  /* Position the scroll button at the bottom, above the fold */
  .scroll-prompt {
    position: absolute;
    bottom: 20px; /* Adjust as needed to appear above the fold */
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
  }

  .scroll-button {
    margin-bottom: 25px;
    background: transparent;
    color: var(--accent-regular, #ff5722);
    padding: 12px 24px;
    border: 2px solid var(--accent-regular, #ff5722);
    border-radius: 8px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .scroll-button:hover {
    background: rgba(255, 87, 34, 0.1); /* Using accent-regular with 10% opacity */
    transform: translateY(-4px);
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
  }

  .hero {
    position: relative;
    min-height: 100vh;
    /* ... other styles ... */
  }

  @media (min-width: 50em) {
    .interactive-background {
      width: 100vw;
    }
  }
</style>

<script>
  // Function to handle scrolling
  function handleScroll() {
    const nextSection = document.querySelector('.work-with-me');
    if (nextSection) {
      // Add offset to account for the header (adjust this value as needed)
      const headerOffset = 150; // Increased from 100 to 150 pixels
      const offset = nextSection.getBoundingClientRect().top + window.scrollY - headerOffset;
      window.scrollTo({
        top: offset,
        behavior: 'smooth'
      });
    }
  }

  // Function to initialize scroll button
  function initScrollButton() {
    const scrollButton = document.querySelector('[data-scroll-button]');
    if (scrollButton) {
      scrollButton.addEventListener('click', handleScroll);
    }
  }

  // Initialize on page load and after Astro view transitions
  document.addEventListener('astro:page-load', initScrollButton);

  // Initialize on first load
  if (document.readyState === 'complete') {
    initScrollButton();
  } else {
    document.addEventListener('DOMContentLoaded', initScrollButton);
  }

  // Background initialization code
  function initBackground() {
    const background = document.querySelector('.interactive-background');

    if (background) {
      let lastUpdate = 0;
      const throttleDelay = 1000 / 60;

      const updateGradient = (e: MouseEvent) => {
        const now = Date.now();
        if (now - lastUpdate > throttleDelay) {
          const rect = background.getBoundingClientRect();
          const x = ((e.clientX - rect.left) / rect.width) * 100;
          const y = ((e.clientY - rect.top) / rect.height) * 100;
          background.style.setProperty('--mouse-x', `${x}%`);
          background.style.setProperty('--mouse-y', `${y}%`);
          lastUpdate = now;
        }
      };

      const heroSection = document.querySelector('.hero');
      if (heroSection) {
        heroSection.addEventListener('mousemove', updateGradient);
      }
    }
  }

  document.addEventListener('astro:page-load', initBackground);

  if (document.readyState === 'complete') {
    initBackground();
  } else {
    document.addEventListener('DOMContentLoaded', initBackground);
  }
</script>
